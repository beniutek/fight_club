require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe FightsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Fight. As you add validations to Fight, be sure to
  # adjust the attributes here as well.
  let!(:fighter_1) { create :fighter }
  let!(:fighter_2) { create :fighter }
  let(:valid_attributes) {
    { fighters: { fighter_id: fighter_1.id, opponent_id: fighter_2.id } }
  }

  let(:invalid_attributes) {
    { fighters: { fighter_id: fighter_1.id } }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # FightsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all fights as @fights" do
      fight = create :fight
      get :index, {}, valid_session
      expect(assigns(:fights)).to eq([fight])
    end
  end

  describe "GET #show" do
    it "assigns the requested fight as @fight" do
      fight = create :fight
      get :show, {:id => fight.to_param}, valid_session
      expect(assigns(:fight)).to eq(fight)
    end
  end

  describe "GET #new" do
    it "assigns a new fight as @fight" do
      get :new, {}, valid_session
      expect(assigns(:fight)).to be_a_new(Fight)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Fight" do
        expect {
          post :create, {:fight => valid_attributes}, valid_session
        }.to change(Fight, :count).by(1)
      end

      it "assigns a newly created fight as @fight" do
        post :create, {:fight => valid_attributes}, valid_session
        expect(assigns(:fight)).to be_a(Fight)
        expect(assigns(:fight)).to be_persisted
      end

      it "redirects to the created fight" do
        post :create, {:fight => valid_attributes}, valid_session
        expect(response).to redirect_to(Fight.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved fight as @fight" do
        post :create, {:fight => invalid_attributes}, valid_session
        expect(assigns(:fight)).to be_a_new(Fight)
      end

      it "re-renders the 'new' template" do
        post :create, {:fight => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end
end
